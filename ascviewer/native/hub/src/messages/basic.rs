#![allow(unused_imports)]

use crate::tokio;
use prost::Message;
use rinf::send_rust_signal;
use rinf::DartSignal;
use rinf::SharedCell;
use std::cell::RefCell;
use std::sync::Mutex;
use std::sync::OnceLock;
use tokio::sync::mpsc::channel;
use tokio::sync::mpsc::Receiver;
use tokio::sync::mpsc::Sender;

// @generated
// This file is @generated by prost-build.
/// \[RINF:DART-SIGNAL\]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SmallText {
    #[prost(string, tag="1")]
    pub text: ::prost::alloc::string::String,
}
/// \[RINF:RUST-SIGNAL\]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SmallNumber {
    #[prost(int32, tag="1")]
    pub number: i32,
}
// @@protoc_insertion_point(module)

type SmallTextCell = SharedCell<(
    Option<Sender<DartSignal<SmallText>>>,
    Option<Receiver<DartSignal<SmallText>>>,
)>;
pub static SMALL_TEXT_CHANNEL: SmallTextCell =
    OnceLock::new();

impl SmallText {
    pub fn get_dart_signal_receiver() -> Receiver<DartSignal<Self>> {
        let cell = SMALL_TEXT_CHANNEL
            .get_or_init(|| {
                let (sender, receiver) = channel(1024);
                Mutex::new(RefCell::new(Some((Some(sender), Some(receiver)))))
            })
            .lock()
            .unwrap();
        #[cfg(debug_assertions)]
        {
            // After Dart's hot restart,
            // a sender from the previous run already exists
            // which is now closed.
            let borrowed = cell.borrow();
            let pair = borrowed.as_ref().unwrap();
            let is_closed = pair.0.as_ref().unwrap().is_closed();
            drop(borrowed);
            if is_closed {
                let (sender, receiver) = channel(1024);
                cell.replace(Some((Some(sender), Some(receiver))));
            }
        }
        let pair = cell.take().unwrap();
        cell.replace(Some((pair.0, None)));
        pair.1.expect("A receiver can be taken only once")
    }
}

impl SmallNumber {
    pub fn send_signal_to_dart(&self) {
        send_rust_signal(
            1,
            self.encode_to_vec(),
            Vec::new(),
        );
    }
}
